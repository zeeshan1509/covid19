{"version":3,"sources":["components/Loading.jsx","components/CovidMap.jsx","components/Legend.jsx","entities/LegendItem.js","entities/LegendItems.js","tasks/LoadCountriesTask.js","components/Covid19.jsx","App.js","reportWebVitals.js","index.js"],"names":["Loading","style","height","display","justifyContent","alignItems","className","role","CovidMap","countries","MapContainer","zoom","center","GeoJSON","fillColor","weight","color","fillOpacity","data","onEachFeature","country","layer","options","properties","name","ADMIN","confirmedText","bindPopup","Legend","legendItems","console","log","map","item","backgroundColor","flex","textColor","fontWeight","fontSize","title","LegendItem","isFor","this","cases","LoadCountriesTask","covid19DataUrl","covidUrl","setState","load","papa","parse","download","header","complete","result","covidCountries","i","features","covidCountry","find","ISO_A3","ISO3","confirmed","Number","Confirmed","length","legendItem","number","toString","replace","Covid19","state","loadCountriesTask","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4zi4oBA4BeA,EA1BC,WACZ,OACI,sBACAC,MAAO,CAACC,OAAQ,QAChBC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAJZ,UAQG,qBAAKC,UAAU,4BAA4BC,KAAK,SAAhD,SACI,sBAAMD,UAAU,UAAhB,0BAEH,qBAAKA,UAAU,2BAA2BC,KAAK,SAA/C,SACG,sBAAMD,UAAU,UAAhB,0BAEH,qBAAKA,UAAU,yBAAyBC,KAAK,SAA7C,SACG,sBAAMD,UAAU,UAAhB,0BAEH,qBAAKA,UAAU,yBAAyBC,KAAK,SAA7C,SACE,sBAAMD,UAAU,UAAhB,8B,wBCOCE,G,MAzBE,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAgBf,OACI,cAACC,EAAA,EAAD,CAAcT,MAAO,CAACC,OAAQ,QAASS,KAAM,IAAKC,OAAQ,CAAC,EAAE,IAA7D,SACI,cAACC,EAAA,EAAD,CAASZ,MAhBD,CACZa,UAAU,QACVC,OAAQ,EACRC,MAAO,QACPC,YAAa,GAYiBC,KAAMT,EAChCU,cAVc,SAACC,EAASC,GAC5BA,EAAMC,QAAQR,UAAYM,EAAQG,WAAWP,MAC7C,IAAMQ,EAAOJ,EAAQG,WAAWE,MAC1BC,EAAgBN,EAAQG,WAAWG,cACzCL,EAAMM,UAAN,UAAmBH,EAAnB,YAA2BE,WCYpBE,EA3BA,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAEb,OADAC,QAAQC,IAAIF,GAER,qBAAK5B,MAAO,CACRE,QAAS,OACTE,WAAY,YAFhB,SAIKwB,EAAYG,KAAI,SAACC,GAAD,OACb,qBACAhC,MAAO,CACHiC,gBAAiBD,EAAKjB,MACtBmB,KAAM,EACNhC,QAAS,OACTE,WAAY,SACZD,eAAgB,SAChBY,MAAyB,MAAlBiB,EAAKG,UAAoBH,EAAKG,UAAY,QACjDC,WAAY,SACZC,SAAU,MACVpC,OAAQ,QAVZ,SAYI,+BAAO+B,EAAKM,SAZNN,EAAKM,a,uCCFhBC,EAPX,WAAYD,EAAOvB,EAAOyB,EAAOL,GAAY,oBACzCM,KAAKH,MAAQA,EACbG,KAAK1B,MAAQA,EACb0B,KAAKD,MAAQA,EACbC,KAAKN,UAAyB,MAAbA,EAAoBA,EAAY,SCmC1CP,EArCG,CACd,IAAIW,EACA,cACA,WAEA,SAACG,GAAD,OAAWA,GAAS,MACpB,SAGF,IAAIH,EACF,oBAEA,WACA,SAACG,GAAD,OAAWA,GAAS,KAAWA,EAAQ,MACvC,SAGF,IAAIH,EACF,oBACA,WACA,SAACG,GAAD,OAAWA,GAAS,KAAWA,EAAQ,OAGzC,IAAIH,EACF,mBACA,WACA,SAACG,GAAD,OAAWA,GAAS,KAAUA,EAAQ,OAGxC,IAAIH,EACF,aACA,WACA,SAACG,GAAD,OAAWA,EAAQ,GAAKA,EAAQ,OAGlC,IAAIH,EAAW,UAAW,WAAW,SAACG,GAAD,OAAW,M,2GCyDvCC,E,iDAzFXC,eACA,4F,KAqCAC,SACA,4F,KAEFC,SAAW,K,KAEXC,KAAO,SAACD,GACN,EAAKA,SAAWA,EAEhBE,IAAKC,MAAM,EAAKJ,SAAU,CACxBK,UAAU,EACVC,QAAQ,EACRC,SAAU,SAACC,GAAD,mBAAY,EAAZ,MAAmCA,EAAOpC,U,gDAIpC,SAACqC,GACnB,IADuC,IAAD,WAC7BC,GACP,IAAMpC,EAAUqC,IAASD,GAEnBE,EAAeH,EAAeI,MAClC,SAACD,GAAD,OAAkBtC,EAAQG,WAAWqC,SAAWF,EAAaG,QAM/D,GAHAzC,EAAQG,WAAWuC,UAAY,EAC/B1C,EAAQG,WAAWG,cAAgB,EAEf,MAAhBgC,EAAsB,CACxB,IAAII,EAAYC,OAAOL,EAAaM,WACpC5C,EAAQG,WAAWuC,UAAYA,EAC/B1C,EAAQG,WAAWG,cAAnB,YAAmC,EAAnC,MACEoC,GAGJ,cAAI,GAAJ,GAAsB1C,IAjBfoC,EAAI,EAAGA,EAAIC,IAASQ,OAAQT,IAAM,EAAlCA,GAqBT,EAAKT,SAASU,Q,gDAGG,SAACrC,GAClB,IAAM8C,EAAarC,EAAY8B,MAAK,SAAC1B,GAAD,OAClCA,EAAKQ,MAAMrB,EAAQG,WAAWuC,cAEd,MAAdI,IAAoB9C,EAAQG,WAAWP,MAAQkD,EAAWlD,U,gDAErC,SAAUmD,GAC/B,OAAOA,EAAOC,WAAWC,QAAQ,wBAAyB,SChCjDC,E,4MAvBbC,MAAQ,CACN9D,UAAW,I,EAEb+D,kBAAoB,IAAI5B,E,uDACxB,WAAqB,IAAD,OAClBF,KAAK8B,kBAAkBxB,MAAK,SAACvC,GAAD,OAAe,EAAKsC,SAAS,CAAEtC,mB,oBAE7D,WAAU,IACAA,EAAciC,KAAK6B,MAAnB9D,UACR,OACE,8BACwB,IAArBA,EAAUwD,OACT,cAAC,EAAD,IAEA,gCACE,cAAC,EAAD,CAAUxD,UAAWA,IACrB,cAAC,EAAD,CAAQoB,YAAaA,a,GAlBb4C,IAAMC,WCtBbC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5bead625.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Loading = () => {\r\n    return ( \r\n        <div \r\n        style={{height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n\r\n    }}\r\n        >\r\n           <div className=\"spinner-grow text-success\" role=\"status\">\r\n               <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n            <div className=\"spinner-grow text-danger\" role=\"status\">\r\n               <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n            <div className=\"spinner-grow text-info\" role=\"status\">\r\n               <span className=\"sr-only\">Loading...</span>\r\n            </div>     \r\n            <div className=\"spinner-grow text-dark\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </div>       \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Loading;","import React from 'react';\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { MapContainer, GeoJSON } from 'react-leaflet';\r\nimport './CovidMap.css'\r\nconst CovidMap = ({countries}) => {\r\n  \r\n    const mapStyle= {\r\n        fillColor:\"white\",\r\n        weight: 1,\r\n        color: \"black\",\r\n        fillOpacity: 1,\r\n\r\n    }\r\n    const onEachCountry = (country, layer)=>{\r\n        layer.options.fillColor = country.properties.color;\r\n        const name = country.properties.ADMIN;\r\n        const confirmedText = country.properties.confirmedText;\r\n        layer.bindPopup(`${name} ${confirmedText}`)\r\n    }\r\n    \r\n    return ( \r\n        <MapContainer style={{height: \"90vh\"}} zoom={1.5} center={[5,30]}>\r\n            <GeoJSON style={mapStyle} data={countries}\r\n            onEachFeature={onEachCountry}/>\r\n        </MapContainer>\r\n\r\n     );\r\n}\r\n \r\nexport default CovidMap;","import React from 'react';\r\n\r\nconst Legend = ({legendItems}) => {\r\n    console.log(legendItems)\r\n    return ( \r\n        <div style={{\r\n            display: \"flex\",\r\n            alignItems: \"stretech\"\r\n        }}>\r\n            {legendItems.map((item)=> (\r\n                <div key={item.title}\r\n                style={{\r\n                    backgroundColor: item.color,\r\n                    flex: 1,\r\n                    display: \"flex\",\r\n                    alignItems: \"center\", // vertical\r\n                    justifyContent: \"center\", // horiztontal\r\n                    color: item.textColor != null ? item.textColor : \"black\",\r\n                    fontWeight: \"bolder\",\r\n                    fontSize: \"1em\",\r\n                    height: \"10vh\",\r\n                  }}>\r\n                    <span>{item.title}</span> \r\n                </div>\r\n            ))}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Legend;","class LegendItem{\r\n    constructor(title, color, isFor, textColor) {\r\n        this.title = title;\r\n        this.color = color;\r\n        this.isFor = isFor;\r\n        this.textColor = textColor != null ? textColor : \"black\";\r\n      }\r\n}\r\nexport default LegendItem;","import LegendItem from './LegendItem';\r\nimport LegenItem from './LegendItem';\r\n\r\nconst legendItems=[\r\n    new LegendItem(\r\n        \"1,000,000 +\",\r\n        \"#741f1f\",\r\n        // \"#8b0000\",\r\n        (cases) => cases >= 1_000_000,\r\n        \"white\"\r\n      ),\r\n    \r\n      new LegendItem(\r\n        \"500,000 - 999,999\",\r\n        // \"#741f1f\",\r\n        \"#9c2929\",\r\n        (cases) => cases >= 500_000 && cases < 1_000_000,\r\n        \"White\"\r\n      ),\r\n    \r\n      new LegendItem(\r\n        \"200,000 - 499,999\",\r\n        \"#c57f7f\",\r\n        (cases) => cases >= 200_000 && cases < 500_000\r\n      ),\r\n    \r\n      new LegendItem(\r\n        \"50,000 - 199,999\",\r\n        \"#d8aaaa\",\r\n        (cases) => cases >= 50_000 && cases < 200_000\r\n      ),\r\n    \r\n      new LegendItem(\r\n        \"0 - 49,999\",\r\n        \"#ebd4d4\",\r\n        (cases) => cases > 0 && cases < 50_000\r\n      ),\r\n    \r\n      new LegendItem(\"No Data\", \"#ffffff\", (cases) => true),\r\n];\r\nexport default legendItems; ","import {features} from '../data/countries.json'\r\nimport papa from 'papaparse';\r\nimport legendItems from '../entities/LegendItems';\r\n\r\n//const features = require('../data/countries.json');\r\nclass LoadCountriesTask {\r\n    covid19DataUrl =\r\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv\";\r\n    // setState = null;\r\n    // mapCountries = features;\r\n\r\n    // load = (setState) => {\r\n    //     this.setState = setState;\r\n    //     papa.parse(this.covid19DataUrl, {\r\n    //         download: true,\r\n    //         header: true,\r\n    //         complete: (result)=>this.#processCovidData(result.data)\r\n    //     })\r\n    \r\n    // }; \r\n    // #processCovidData = (covidCountries) => {\r\n    //     for (let i=0; i< this.mapCountries.length; i++){\r\n    //         const mapCountry = this.mapCountries[i];\r\n    //         const covidCountry = covidCountries.find(\r\n    //             (covidCountry)=>covidCountry.ISO3 = mapCountry.properties.ISO_A3\r\n    //         );\r\n    //         mapCountry.properties.confirmed = 0;\r\n    //         mapCountry.properties.confirmedText = \"0\";\r\n\r\n    //         if(covidCountry != null){\r\n    //             const confirmed = Number(covidCountry.Confirmed);\r\n    //             mapCountry.properties.confirmed=confirmed;\r\n    //             mapCountry.properties.confirmedText = this.#formatNumberWithCommas(confirmed);\r\n\r\n    //         }\r\n    //     }\r\n    //     this.setState(this.mapCountries)\r\n\r\n    // };\r\n\r\n\r\n\r\n\r\n\r\n    covidUrl =\r\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv\";\r\n\r\n  setState = null;\r\n\r\n  load = (setState) => {\r\n    this.setState = setState;\r\n\r\n    papa.parse(this.covidUrl, {\r\n      download: true,\r\n      header: true,\r\n      complete: (result) => this.#processCovidData(result.data),\r\n    });\r\n  };\r\n\r\n  #processCovidData = (covidCountries) => {\r\n    for (let i = 0; i < features.length; i++) {\r\n      const country = features[i];\r\n      //console.log(country);\r\n      const covidCountry = covidCountries.find(\r\n        (covidCountry) => country.properties.ISO_A3 === covidCountry.ISO3\r\n      );\r\n\r\n      country.properties.confirmed = 0;\r\n      country.properties.confirmedText = 0;\r\n\r\n      if (covidCountry != null) {\r\n        let confirmed = Number(covidCountry.Confirmed);\r\n        country.properties.confirmed = confirmed;\r\n        country.properties.confirmedText = this.#formatNumberWithCommas(\r\n          confirmed\r\n        );\r\n      }\r\n      this.#setCountryColor(country);\r\n    \r\n    }\r\n\r\n    this.setState(features);\r\n  };\r\n\r\n  #setCountryColor = (country) => {\r\n    const legendItem = legendItems.find((item) =>\r\n      item.isFor(country.properties.confirmed)\r\n    );\r\n    if (legendItem != null) country.properties.color = legendItem.color;\r\n  }\r\n   #formatNumberWithCommas = function (number)  {\r\n        return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n      };\r\n}\r\n\r\nexport default LoadCountriesTask;","import React, { useState, useEffect } from 'react';\r\nimport Loading from './Loading'\r\nimport CovidMap from './CovidMap';\r\nimport Legend from './Legend'\r\nimport LoadCountriesTask from '../tasks/LoadCountriesTask'\r\nimport legendItems from '../entities/LegendItems'\r\n\r\n/*const Covid19 = () => {\r\n    const [countries, setCountries] = useState([]);\r\n    const load = () => {\r\n        const loadCountriesTask = new LoadCountriesTask();\r\n        loadCountriesTask.load(countries);\r\n    }\r\n\r\n    useEffect(load,[]);\r\n\r\n    return (<div>\r\n\r\n       {countries.length === 0 ? (\r\n       <Loading/>\r\n       ) : (\r\n       <div>\r\n          <CovidMap/>\r\n           <Legend/>\r\n        </div>\r\n        )}\r\n    </div>\r\n    );\r\n   \r\n    \r\n}\r\n \r\nexport default Covid19;*/\r\n// const legendItemsReverse = [...legendItems].reverse();\r\nclass Covid19 extends React.Component {\r\n   \r\n    state = {\r\n      countries: [],\r\n    };\r\n    loadCountriesTask = new LoadCountriesTask();\r\n    componentDidMount() {\r\n      this.loadCountriesTask.load((countries) => this.setState({ countries }));\r\n    }\r\n    render() {\r\n      const { countries } = this.state;\r\n      return (\r\n        <div>\r\n          {countries.length === 0 ? (\r\n            <Loading />\r\n          ) : (\r\n            <div>\r\n              <CovidMap countries={countries} />\r\n              <Legend legendItems={legendItems} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  export default Covid19;","import React from \"react\";\nimport \"./App.css\";\nimport Covid19 from './components/Covid19'\n\nfunction App() {\n  return (\n    <div>\n      <Covid19 />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}